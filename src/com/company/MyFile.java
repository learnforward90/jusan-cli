package com.company;

import java.io.*;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;


import java.util.Scanner;

import static com.company.Main.copySourceToDest;

public class MyFile {

    public static void listDirectory(String path) throws FileNotFoundException {
        File[] files = new File(path).listFiles();
        for (File file : files) {
            System.out.println(file.getName());
        }
    }
    public static void listPythonFiles(String path) {
        File[] files = new File(path).listFiles();
        for (File file : files) {
            if (file.getName().contains(".py")) {
                System.out.println(file.getName());
            }
        }
    }
    public static void isDirectory(String path) {
        boolean file = new File(path).isDirectory();
        if (file){
            System.out.println("true");
        } else {
            System.out.println("false");
        }
    }
    public static void define(String path) {
        File myFile = new File(path);
        if (myFile.isFile()){
            System.out.println("файл");
        } else if (myFile.isDirectory()){
            System.out.println("директория");
        }
    }
    public static void printPermissions(String path) {
        File myFile = new File(path);
        String[] str = new String[3];
        str[0] = (myFile.canRead()) ? ("r"):("-");
        str[1] = (myFile.canWrite()) ? ("w"):("-");
        str[2] = (myFile.canExecute()) ? ("x"):("-");
        for (String letter: str){
            System.out.print(letter);
        }
        System.out.println();
    }
    public static void setPermissions(String path, String permissions) {

        if (permissions.charAt(0) == 114){
            new File(path).setReadable(true);
        } else {
            new File(path).setReadable(false);
        }

        if (permissions.charAt(1) == 119) {
            new File(path).setWritable(true);
        }else {
            new File(path).setWritable(false);
        }

        if (permissions.charAt(2) == 120) {
            new File(path).setExecutable(true);
        } else{
            new File(path).setExecutable(false);
        }

        System.out.println("Permissions changed");

    }
    public static void printContent(String path) throws FileNotFoundException {
        File file = new File(path);
        Scanner myReader = new Scanner(file);
        while (myReader.hasNextLine()) {
            String data = myReader.nextLine();
            System.out.println(data);
        }
    }
    public static void appendFooter(String path)  {
        try (FileWriter f = new FileWriter(path, true);
             BufferedWriter b = new BufferedWriter(f);
             PrintWriter p = new PrintWriter(b);) {

            p.println("# Autogenerated line");

        } catch (IOException i) {
            i.printStackTrace();
        }

    }
    public static void createBackup(String path) throws IOException {
        final Path fromPath = Paths.get(path);

        Files.walk(fromPath)
                .forEach(source -> copySourceToDest(fromPath, source));
    }
    public static void printLongestWord(String path) throws IOException {
        String longest_word = "";
        String current;
        Scanner sc = new Scanner(new File(path));


        while (sc.hasNext()) {
            current = sc.next();
            if (current.length() > longest_word.length()) {
                longest_word = current;
            }

        }
        System.out.println(longest_word);
    }
    public static void help() {
        System.out.println("MyFS 1.0 команды:");
        System.out.println("ls <path>               выводит список всех файлов и директорий для `path`" );
        System.out.println("ls_py <path>            выводит список файлов с расширением `.py` в `path`" );
        System.out.println("is_dir <path>           выводит `true`, если `path` это директория, в других случаях `false`" );
        System.out.println("define <path>           выводит `директория` или `файл` в зависимости от типа `path`" );
        System.out.println("readmod <path>          выводит права для файла в формате `rwx` для текущего пользователя" );
        System.out.println("setmod <path> <perm>    устанавливает права для файла `path`" );
        System.out.println("cat <path>              выводит контент файла" );
        System.out.println("append <path>           добавляет строку `# Autogenerated line` в конец `path`" );
        System.out.println("bc <path>               создает копию `path` в директорию `/tmp/${date}.backup` где, date - это дата в формате `dd-mm-yyyy`" );
        System.out.println("greplong <path>         выводит самое длинное слово в файле" );
        System.out.println("help                    выводит список команд и их описание" );
        System.out.println("exit                    завершает работу программы" );
    }
    public static void exit() { }
}
